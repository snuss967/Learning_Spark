[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\spenc\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\spenc\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Eclipse Foundation Java 11.0.12)
[debug]       Load.loadUnit: plugins took 166.0244ms
[debug]       Load.loadUnit: defsScala took 0.6201ms
[debug] [Loading] Scanning directory C:\Users\spenc\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\spenc\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.4773 ms
[debug]           Load.resolveProject(global-plugins) took 90.9389ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\spenc\.sbt\1.0\plugins, plugins: List(<none>))) took 173.8164ms
[debug] [Loading] Done in C:\Users\spenc\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 219.4631ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4427ms
[debug]     Load.loadUnit(file:/C:/Users/spenc/.sbt/1.0/plugins/, ...) took 409.1993ms
[debug]   Load.apply: load took 767.8584ms
[debug]   Load.apply: resolveProjects took 52.9463ms
[debug]   Load.apply: finalTransforms took 426.4495ms
[debug]   Load.apply: config.delegates took 21.6956ms
[debug]   Load.apply: Def.make(settings)... took 766.5552ms
[debug]   Load.apply: structureIndex took 137.7751ms
[debug]   Load.apply: mkStreams took 2.834ms
[info] loading global plugins from C:\Users\spenc\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7693.6771ms
[debug]           Load.loadUnit: plugins took 33.3217ms
[debug]           Load.loadUnit: defsScala took 0.0085ms
[debug] [Loading] Scanning directory C:\Users\spenc\Documents\Programming\Personal Projects\Spark\project
[debug]             Load.loadUnit: mkEval took 12.9882ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\spenc\Documents\Programming\Personal Projects\Spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6311 ms
[info] loading settings for project spark-build from idea.sbt ...
[debug]               Load.resolveProject(spark-build) took 9.1341ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-build, base: C:\Users\spenc\Documents\Programming\Personal Projects\Spark\project, plugins: List(<none>))) took 13.0471ms
[debug] [Loading] Done in C:\Users\spenc\Documents\Programming\Personal Projects\Spark\project, returning: (spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3427.3651ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.2142ms
[debug]         Load.loadUnit(file:/C:/Users/spenc/Documents/Programming/Personal%20Projects/Spark/project/, ...) took 3471.7832ms
[debug]       Load.apply: load took 3475.3711ms
[debug]       Load.apply: resolveProjects took 0.2905ms
[debug]       Load.apply: finalTransforms took 12.672ms
[debug]       Load.apply: config.delegates took 0.5231ms
[debug]       Load.apply: Def.make(settings)... took 144.5203ms
[debug]       Load.apply: structureIndex took 50.0479ms
[debug]       Load.apply: mkStreams took 0.0068ms
[info] loading project definition from C:\Users\spenc\Documents\Programming\Personal Projects\Spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5174.0134ms
[debug]     Load.loadUnit: defsScala took 0.0085ms
[debug] [Loading] Scanning directory C:\Users\spenc\Documents\Programming\Personal Projects\Spark
[debug]       Load.loadUnit: mkEval took 0.6462ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\spenc\Documents\Programming\Personal Projects\Spark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.4009 ms
[info] loading settings for project spark from build.sbt ...
[debug]         Load.resolveProject(spark) took 58.476ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark, base: C:\Users\spenc\Documents\Programming\Personal Projects\Spark, plugins: List(<none>))) took 63.9945ms
[debug] [Loading] Done in C:\Users\spenc\Documents\Programming\Personal Projects\Spark, returning: (spark)
[debug]     Load.loadUnit: loadedProjectsRaw took 1963.5602ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.9094ms
[debug]   Load.loadUnit(file:/C:/Users/spenc/Documents/Programming/Personal%20Projects/Spark/, ...) took 7166.3605ms
[debug] Load.apply: load took 7169.847ms
[debug] Load.apply: resolveProjects took 0.2505ms
[debug] Load.apply: finalTransforms took 68.6045ms
[debug] Load.apply: config.delegates took 0.5672ms
[debug] Load.apply: Def.make(settings)... took 124.5704ms
[debug] Load.apply: structureIndex took 29.4767ms
[debug] Load.apply: mkStreams took 0.0066ms
[info] set current project to Spark - Scala Playground (in build file:/C:/Users/spenc/Documents/Programming/Personal%20Projects/Spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49204 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49204, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Spark - Scala Playground (in build file:/C:/Users/spenc/Documents/Programming/Personal%20Projects/Spark/)
[debug] > Exec(idea-shell, None, None)
